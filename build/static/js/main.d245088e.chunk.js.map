{"version":3,"sources":["components/toggleButton/index.js","components/textBlock/copyIcon.js","components/textBlock/index.js","pages/Instructions/codeExample.js","pages/Instructions/index.js","components/Button/index.js","network/requests.js","components/loadingBar/index.js","pages/CreateDB/index.js","i18next.js","App.js","network/local.js","serviceWorker.js","index.js"],"names":["buttonsBlockClass","buttonClass","toggledClass","Toggle","props","buttons","map","element","key","className","toggledKey","onClick","setToggledKey","copyIcon","xmlns","viewBox","data-name","d","textBlockClass","copiedClass","TextBlock","useState","isCopied","setIsCopied","text","textarea","document","createElement","setAttribute","textContent","body","appendChild","select","execCommand","remove","setTimeout","copy","textToCopy","nodejs","python","getUsageBlock","language","apiKey","getInstall","getUsage","apikey","instructionsClassName","appear","Instructions","t","useTranslation","languages","useEffect","getElementById","classList","add","id","Button","callback","name","api","createNewUser","loadApiKey","setLoading","a","async","createDatabase","fetch","result","ok","json","localStorage","setItem","Error","statusText","loadingBar","loaderPlaceHolderCLass","loaderClass","LoadingBar","style","isLoading","animation","animationType","CreateDB","setApiKey","console","error","tryToLoadApiKey","resources","en","translation","ru","i18n","use","initReactI18next","init","lng","keySeparator","interpolation","escapeValue","App","getItem","e","log","loadApiKeyFromLocalStorage","changeLanguage","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d245088e.chunk.js","sourcesContent":["import React from 'react'\nimport './index.sass'\n\n\nconst buttonsBlockClass = 'toggleButtons';\nconst buttonClass = 'toggleButton';\nconst toggledClass = 'toggled';\n\n\nfunction Toggle(props) {\n    let buttons = props.buttons.map((element, key) => {\n        let className = buttonClass;\n        className += key === props.toggledKey ? ' ' + toggledClass : '' ;\n        return (<div className={className} onClick={() => props.setToggledKey(key)} key={key}>{element}</div>)\n    });\n    \n    return(\n        <div className={buttonsBlockClass + ' ' + props.className}>{ buttons }</div>\n    )\n}\n\n\nexport default Toggle","import React from 'react';\n\n\nexport const copyIcon =\n    <svg className='copy' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'>\n        <g data-name='Layer 3'>\n            <path d='M40.63,13H12.38A4.69,4.69,0,0,0,7.7,17.67V57.31A4.69,4.69,0,0,0,12.38,62H40.63a4.69,4.69,0,0,0,4.69-4.69V17.67A4.69,4.69,0,0,0,40.63,13Zm2.69,44.33A2.69,2.69,0,0,1,40.63,60H12.38A2.69,2.69,0,0,1,9.7,57.31V17.67A2.69,2.69,0,0,1,12.38,15H40.63a2.69,2.69,0,0,1,2.69,2.69Z'/>\n            <path d='M51.74,2H23.26a4.58,4.58,0,0,0-4.58,4.57v3.55a1,1,0,0,0,2,0V6.57A2.58,2.58,0,0,1,23.26,4H51.74A2.57,2.57,0,0,1,54.3,6.57V46.44A2.58,2.58,0,0,1,51.74,49H48.5a1,1,0,0,0,0,2h3.24a4.58,4.58,0,0,0,4.57-4.58V6.57A4.57,4.57,0,0,0,51.74,2Z'/>\n        </g>\n    </svg>;","import { copyIcon } from './copyIcon';\nimport './index.sass'\nimport React, {useState} from 'react';\n\n\nconst textBlockClass = 'textBlock';\nconst copiedClass = 'copied';\n\n\nfunction TextBlock(props) {\n    let [isCopied, setIsCopied] = useState(false);\n    let className = textBlockClass;\n    className += isCopied ? ' ' + copiedClass : '';\n\n    return (\n        <div className={className + ' ' + props.className}>\n            <div onClick={() => copy(props.textToCopy, setIsCopied)}>{copyIcon}</div>\n            {props.text}\n        </div>\n    )\n}\n\n\nfunction copy(text, setIsCopied) {\n    let textarea = document.createElement('textarea');\n    textarea.setAttribute('visibility', 'collapse');\n    textarea.textContent = text;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n\n    setIsCopied(true);\n    setTimeout(() => setIsCopied(false), 1000);\n}\n\n\nexport default TextBlock;","import React from \"react\";\nimport './codeExample.sass'\n\nexport const nodejs = 'nodejs';\nexport const python = 'python';\n\nexport const getUsageBlock = (language, apiKey) => {\n    const languageUsages = {\n        'nodejs': (\n            <p>\n                <span className=\"keyword\">const</span> {'{'}<span className=\"variable\">getDatabase</span>{'}'} =<span className=\"func\"> require</span>(<span className=\"string\">'dbhub'</span>);<br/>\n                <br/>\n                <span className=\"keyword\">let</span> <span className=\"variable\">apiKey</span> =<span className=\"string\"> '{apiKey}'</span>;<br/>\n                <span className=\"keyword\">let</span> <span className=\"variable\">db</span> =<span className=\"func\"> getDatabase</span>(<span className=\"variable\">apiKey</span>);<br/>\n                <br/>\n                {'// Create collection'}<br/>\n                <span className=\"keyword\">let</span> <span className=\"variable\">collectionName</span> = <span className=\"string\">'example'</span>;<br/>\n                <span className=\"keyword\">let</span> <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">getCollection</span>(<span className=\"variable\">collectionName</span>);<br/>\n                <br/>\n                {'//Usage'}<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">id</span>) => {'{}'});<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">element</span>) => {'{}'});<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n            </p>\n        ),\n        'python': (\n            <p>\n                <span className=\"keyword\">from </span><span className=\"variable\">dbhub</span> <span className=\"keyword\">import</span> <span className=\"func\"></span><span className=\"string\">get_database</span><br/>\n                <br/>\n                <span className=\"variable\">api_key</span> =<span className=\"string\"> '{apiKey}'</span><br/>\n                <span className=\"variable\">db</span> =<span className=\"func\"> get_database</span>(<span className=\"variable\">api_key</span>)<br/>\n                <br/>\n                {'// Create collection'}<br/>\n                <span className=\"variable\">collection_name</span> = <span className=\"string\">'example'</span><br/>\n                <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">get_collection</span>(<span className=\"variable\">collection_name</span>)<br/>\n                <br/>\n                {'//Usage'}<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>)<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>)<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>)<br/>\n                <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>)<br/>\n                <br/>\n            </p>\n        )};\n    return languageUsages[language];\n};\n\nexport const getInstall = (language) => {\n    let installs = {\n        'nodejs': 'npm install dbhub -s',\n        'python': 'pip install dbhub'\n    };\n    return installs[language]\n};\n\nexport const getUsage = (language, apikey) => {\n    const usage = {\n        'nodejs': ('const {getDatabase} = require(\\'dbhub\\');\\n' +\n            '\\n' +\n            'let apiKey = \\'' + apikey + '\\';\\n' +\n            'let db = getDatabase(apiKey);\\n' +\n            '\\n' +\n            '// Create collection\\n' +\n            'let collectionName = \\'example\\';\\n' +\n            'let collection = db.getCollection(collectionName);\\n' +\n            '\\n' +\n            '//Usage\\n' +\n            'collection.create(element).then((id) => {});\\n' +\n            'collection.read(id).then((element) => {});\\n' +\n            'collection.update(id, element).then((success) => {});\\n' +\n            'collection.delete(id).then((success) => {});'),\n\n        'python':\n            ('from dbhub import get_database\\n' +\n                '\\n' +\n                'api_key = \\'aa57dc3a-df8c-1c53-b5f7-6c598a7e4644\\'\\n' +\n                'db = get_database(api_key)\\n' +\n                '\\n' +\n                '# Create collection\\n' +\n                'collection_name = \\'example\\'\\n' +\n                'collection = db.get_collection(collection_name)\\n' +\n                '\\n' +\n                '# Usage\\n' +\n                'collection.create(element)\\n' +\n                'collection.read(id)\\n' +\n                'collection.update(id, element)\\n' +\n                'collection.delete(id)\\n')\n    };\n    return usage[language];\n};","import React, { useEffect, useState } from 'react';\nimport Toggle from \"../../components/toggleButton\";\nimport './index.sass';\nimport TextBlock from \"../../components/textBlock\";\nimport { getInstall, getUsage, getUsageBlock, nodejs, python } from \"./codeExample\";\nimport { useTranslation } from 'react-i18next';\n\n\n\nconst instructionsClassName = 'instructions';\nconst appear = 'appear';\n\n\nfunction Instructions(props) {\n    const { t } = useTranslation();\n\n    const { apiKey } = props;\n    const languages = [\n        nodejs,\n        python,\n    ];\n\n    let [toggledKey, setToggledKey] = useState(0);\n    let language = languages[toggledKey];\n\n    useEffect(() => {\n        let elem = document.getElementById(instructionsClassName);\n        elem.classList.add(appear);\n    });\n\n    return (\n        <div id={instructionsClassName}>\n            <Toggle className='languageToggle' buttons={languages}\n                setToggledKey={setToggledKey} toggledKey={toggledKey}/>\n            <h3 className='label'>{t('yourApiKey')}</h3>\n            <TextBlock className='apiKey' text={apiKey} textToCopy={apiKey}/>\n            <TextBlock className='install' text={'$ ' + getInstall(language)} textToCopy={getInstall(language)}/>\n            <TextBlock className='usage' text={getUsageBlock(language, apiKey)} textToCopy={getUsage(language, apiKey)}/>\n        </div>\n    );\n}\n\n\nexport default Instructions;","import React from 'react';\nimport './index.css';\n\n\nfunction Button(props) {\n    return (\n        <button onClick={props.callback} className='button'>{props.name}</button>\n    );\n}\n\n\nexport default Button;\n","const api = 'https://dbhub.herokuapp.com';\nconst createNewUser = 'create-new-user';\n\n\nexport async function loadApiKey(setLoading) {\n    setLoading(true);\n    let apiKey = await createDatabase();\n    setLoading(false);\n    return apiKey\n}\n\n\nasync function createDatabase() {\n    let result = await fetch(api + '/' + createNewUser);\n\n    if (result.ok) {\n        let json = await result.json();\n        localStorage.setItem('apiKey', json);\n        return json;\n    } else {\n        throw new Error(result.statusText)\n    }\n}","import React from \"react\";\nimport './index.sass'\n\n\nconst loadingBar ='loadingBar';\nconst loaderPlaceHolderCLass = 'loaderPlaceholder';\nconst loaderClass = 'loader';\n\n\nfunction LoadingBar(props) {\n    return (\n        <div className={loadingBar}>\n            <div className={loaderPlaceHolderCLass}/>\n            <div className={loaderClass} style={ props.isLoading ? { animation: props.animationType } : { animation: 'none' }}/>\n        </div>\n    )\n}\n\n\nexport default LoadingBar;","import React, { useState } from 'react'\nimport './index.sass';\nimport Button from '../../components/Button';\nimport { loadApiKey } from \"../../network/requests\";\nimport LoadingBar from \"../../components/loadingBar\";\nimport { useTranslation } from 'react-i18next';\n\n\nfunction CreateDB({ setApiKey }) {\n    const { t } = useTranslation();\n\n    let [isLoading, setLoading] = useState(false);\n    const animationType = '3s ease-in-out infinite loading';\n    \n    return(\n        <div className='createElement'>\n            <LoadingBar isLoading={isLoading} animationType={animationType}/>\n            <h2>{t('createInOneClick')}</h2>\n            <h3>{t('makeItEasy')}</h3>\n            <Button name={t('createDatabase')}\n                    callback={() => tryToLoadApiKey(loadApiKey, setLoading, setApiKey)}/>\n        </div>\n    );\n}\n\n\nasync function tryToLoadApiKey(loadApiKey, setLoading, setApiKey) {\n    try {\n        let apiKey = await loadApiKey(setLoading);\n        setApiKey(apiKey);\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n\n\nexport default CreateDB;","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport translationEN from './locales/english.json';\nimport translationRU from './locales/russian.json';\n\nconst resources = {\n    en: {\n        translation: translationEN\n    },\n    ru: {\n        translation: translationRU\n    }\n};\n\ni18n\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: 'en',\n\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;","import React, {useState} from 'react';\nimport './App.sass';\nimport Instructions from './pages/Instructions';\nimport CreateDB from './pages/CreateDB';\nimport { loadApiKeyFromLocalStorage } from \"./network/local\";\nimport { useTranslation } from 'react-i18next';\nimport i18n from './i18next'\n\n\nfunction App() {\n    const { t } = useTranslation();\n\n    let [apiKey, setApiKey] = useState(loadApiKeyFromLocalStorage());\n    let body = apiKey ? <Instructions apiKey={apiKey}/> : <CreateDB setApiKey={setApiKey}/>;\n\n    return (\n    <div className='App'>\n        <div className='localeSettings'>\n            <span className='language' onClick={() => i18n.changeLanguage('en')}>en</span>\n            <span> / </span>\n            <span className='language' onClick={() => i18n.changeLanguage('ru')}>ru</span>\n        </div>\n        <header className='header'>DB<span className='header-selection'>hub</span></header>\n        {body}\n        <div className='signs'>{t('createdBy')} <a href='https://twitter.com/nnoxnnox'>@noxormy</a></div>\n    </div>\n  );\n}\n\n\nexport default App;\n","export function loadApiKeyFromLocalStorage() {\n    try {\n        return localStorage.getItem('apiKey');\n    }\n    catch (e) {\n        console.log(e);\n        return null;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './i18next';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}