{"version":3,"sources":["components/Button.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","callback","className","name","Instructions","usageCode","apiKey","App","useState","setApiKey","body","a","async","fetch","api","result","ok","json","console","log","status","createDatabase","then","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e773d10b.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n    return (\n        <button onClick={props.callback} className=\"button\">{props.name}</button>\n    );\n}\n\nexport default Button;\n","import React from 'react';\nimport './Instructions.css';\n\nfunction Instructions(props) {\n    const usageCode =\n        <p><span className=\"keyword\">const</span> {'{'}<span className=\"variable\">getDatabase</span>{'}'} =<span className=\"func\"> require</span>(<span className=\"string\">'dbhub'</span>);<br/>\n        <br/>\n        <span className=\"keyword\">let</span> <span className=\"variable\">apikey</span> =<span className=\"string\"> '{props.apiKey}'</span>;<br/>\n        <span className=\"keyword\">let</span> <span className=\"variable\">db</span> =<span className=\"func\"> getDatabase</span>(<span className=\"variable\">apiKey</span>);<br/>\n        <br/>\n        {'// Create collection'}<br/>\n            <span className=\"keyword\">let</span> <span className=\"variable\">collectionName</span> = <span className=\"string\">'example'</span>;<br/>\n            <span className=\"keyword\">let</span> <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">getCollection</span>(<span className=\"variable\">collectionName</span>);<br/>\n        <br/>\n        {'//Usage'}<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>)<br/>\n        <br/>\n        {'//Async'}<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">id</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">element</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n    </p>;\n    return (\n        <div className='instructions'>\n            <div className='install'>$ npm install dbhub -s</div>\n            <div className='usage'>{usageCode}</div>\n        </div>\n    );\n}\n\nexport default Instructions;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Button from \"./components/Button\";\nimport Instructions from \"./components/Instructions\";\n\nfunction App() {\n    let [apiKey, setApiKey] = useState(false);\n    let body = apiKey ? <Instructions apiKey={apiKey}/> :\n        <Button name={\"Create Database\"} callback={() => createDatabase().then(setApiKey)}/>;\n    return (\n    <div className=\"App\">\n        <header className=\"App-header\">DB<span className=\"App-selection\">hub</span></header>\n        {body}\n    </div>\n  );\n}\n\nasync function createDatabase() {\n    const api = 'https://dbhub.herokuapp.com';\n    const createNewUser = 'create-new-user';\n\n    let result = await fetch(api + '/' + createNewUser);\n    if (result.ok) {\n        let json = await result.json();\n        console.log(json);\n        return json;\n    } else {\n        console.log(\"Ошибка HTTP: \" + result.status);\n        return false;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}