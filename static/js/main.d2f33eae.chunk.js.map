{"version":3,"sources":["pages/Instructions/codeExample.js","pages/Instructions/index.js","components/Button/Button.js","pages/CreateDB/index.js","App.js","serviceWorker.js","index.js"],"names":["copyIcon","className","xmlns","viewBox","data-name","d","getUsageBlock","language","apiKey","nodejs","python","install","getUsage","apikey","setter","valueToCopy","variable","callback","includes","text","setCopied","copiedClass","textarea","document","createElement","setAttribute","textContent","body","appendChild","select","execCommand","remove","copy","delay","setTimeout","Index","props","useState","chosenLanguage","setChosenLanguage","instructionsClass","setInstructionsClass","installCopied","setInstallCopied","apiKeyCopied","setApiKeyCopied","usageCopied","setUsageCopied","useEffect","onClick","Button","name","CreateDB","App","isLoading","setLoading","localStorage","getItem","setApiKey","a","async","fetch","api","result","ok","json","setItem","console","log","status","createDatabase","then","id","style","animation","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2f33eae.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const copyIcon =\n        <svg className=\"copy\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\n            <g data-name=\"Layer 3\">\n                <path d=\"M40.63,13H12.38A4.69,4.69,0,0,0,7.7,17.67V57.31A4.69,4.69,0,0,0,12.38,62H40.63a4.69,4.69,0,0,0,4.69-4.69V17.67A4.69,4.69,0,0,0,40.63,13Zm2.69,44.33A2.69,2.69,0,0,1,40.63,60H12.38A2.69,2.69,0,0,1,9.7,57.31V17.67A2.69,2.69,0,0,1,12.38,15H40.63a2.69,2.69,0,0,1,2.69,2.69Z\"/>\n                <path d=\"M51.74,2H23.26a4.58,4.58,0,0,0-4.58,4.57v3.55a1,1,0,0,0,2,0V6.57A2.58,2.58,0,0,1,23.26,4H51.74A2.57,2.57,0,0,1,54.3,6.57V46.44A2.58,2.58,0,0,1,51.74,49H48.5a1,1,0,0,0,0,2h3.24a4.58,4.58,0,0,0,4.57-4.58V6.57A4.57,4.57,0,0,0,51.74,2Z\"/>\n            </g>\n        </svg>;\n\nexport const getUsageBlock = (language, apiKey) => {\n        const languageUsages = {\n                'nodejs': (<p>\n                    <span className=\"keyword\">const</span> {'{'}<span className=\"variable\">getDatabase</span>{'}'} =<span className=\"func\"> require</span>(<span className=\"string\">'dbhub'</span>);<br/>\n                    <br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">apikey</span> =<span className=\"string\"> '{apiKey}'</span>;<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">db</span> =<span className=\"func\"> getDatabase</span>(<span className=\"variable\">apiKey</span>);<br/>\n                    <br/>\n                    {'// Create collection'}<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">collectionName</span> = <span className=\"string\">'example'</span>;<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">getCollection</span>(<span className=\"variable\">collectionName</span>);<br/>\n                    <br/>\n                    {'//Usage'}<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">id</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">element</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n                </p>\n        ),\n            'python': (<p>\n                    <span className=\"keyword\">from </span><span className=\"variable\">dbhub</span> <span className=\"keyword\">import</span> <span className=\"func\"></span><span className=\"string\">get_database</span><br/>\n                    <br/>\n                    <span className=\"variable\">api_key</span> =<span className=\"string\"> '{apiKey}'</span><br/>\n                    <span className=\"variable\">db</span> =<span className=\"func\"> get_database</span>(<span className=\"variable\">api_key</span>)<br/>\n                    <br/>\n                    {'// Create collection'}<br/>\n                    <span className=\"variable\">collection_name</span> = <span className=\"string\">'example'</span><br/>\n                    <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">get_collection</span>(<span className=\"variable\">collection_name</span>)<br/>\n                    <br/>\n                    {'//Usage'}<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>)<br/>\n                    <br/>\n            </p>\n            )};\n            return languageUsages[language];\n};\n\nexport const nodejs = 'nodejs';\nexport const python = 'python';\n\nexport const install = {\n    'nodejs': 'npm install dbhub -s',\n    'python': 'pip install dbhub'\n};\n\nexport const getUsage = (language, apikey) => {\n    const usage = {\n            'nodejs': ('const {getDatabase} = require(\\'dbhub\\');\\n' +\n                '\\n' +\n                'let apikey = \\'' + apikey + '\\';\\n' +\n                'let db = getDatabase(apiKey);\\n' +\n                '\\n' +\n                '// Create collection\\n' +\n                'let collectionName = \\'example\\';\\n' +\n                'let collection = db.getCollection(collectionName);\\n' +\n                '\\n' +\n                '//Usage\\n' +\n                'collection.create(element).then((id) => {});\\n' +\n                'collection.read(id).then((element) => {});\\n' +\n                'collection.update(id, element).then((success) => {});\\n' +\n                'collection.delete(id).then((success) => {});'),\n\n            'python':\n                ('from dbhub import get_database\\n' +\n                    '\\n' +\n                    'api_key = \\'aa57dc3a-df8c-1c53-b5f7-6c598a7e4644\\'\\n' +\n                    'db = get_database(api_key)\\n' +\n                    '\\n' +\n                    '# Create collection\\n' +\n                    'collection_name = \\'example\\'\\n' +\n                    'collection = db.get_collection(collection_name)\\n' +\n                    '\\n' +\n                    '# Usage\\n' +\n                    'collection.create(element)\\n' +\n                    'collection.read(id)\\n' +\n                    'collection.update(id, element)\\n' +\n                    'collection.delete(id)\\n')\n                };\n    return usage[language];\n};\n","import React, {useEffect, useState} from 'react';\nimport './index.sass';\nimport {nodejs, python,copyIcon, install, getUsage, getUsageBlock} from \"./codeExample\";\n\nfunction Index(props) {\n    let className = 'instructions';\n    let classNameAppear = className + ' appear';\n    let classChoosedName = ' toggled';\n\n    const [chosenLanguage, setChosenLanguage] = useState(nodejs);\n\n    const {apiKey} = props;\n\n    const [instructionsClass, setInstructionsClass] = useState(className);\n    const [installCopied, setInstallCopied] = useState('');\n    const [apiKeyCopied, setApiKeyCopied] = useState('');\n    const [usageCopied, setUsageCopied] = useState('');\n\n    useEffect(() => {\n        if (instructionsClass === className) setInstructionsClass(classNameAppear);\n        if (installCopied) delay(setInstallCopied);\n        if (apiKeyCopied) delay(setApiKeyCopied);\n        if (usageCopied) delay(setUsageCopied);\n    });\n    return (\n        <div className={instructionsClass}>\n            <div className=\"languageToggle\">\n                <div className={chosenLanguage === nodejs ? 'language' + classChoosedName : 'language'} onClick={() => setChosenLanguage(nodejs)}>Node js</div>\n                <div className={chosenLanguage === python ? 'language' + classChoosedName : 'language'} onClick={() => setChosenLanguage(python)}>Python</div>\n            </div>\n            <h3 className='label'>Your api key:</h3>\n            <div className={'apiKey ' + apiKeyCopied}>\n                <div onClick={() => setter(apiKey, apiKeyCopied, setApiKeyCopied)}>{copyIcon}</div>\n                {apiKey}\n            </div>\n            <div className={'install ' + installCopied}>\n                <div onClick={() => setter(install[chosenLanguage], installCopied, setInstallCopied)}>{copyIcon}</div>\n                $ {install[chosenLanguage]}\n            </div>\n            <div className={'usage ' + usageCopied}>\n                <div onClick={() => setter(getUsage(chosenLanguage ,apiKey), usageCopied, setUsageCopied)}>{copyIcon}</div>\n                {getUsageBlock(chosenLanguage, apiKey)}\n            </div>\n        </div>\n    );\n}\n\nfunction copy(text, setCopied, copiedClass) {\n    let textarea = document.createElement('textarea');\n    textarea.setAttribute('visibility', 'collapse');\n    textarea.textContent = text;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n\n    setCopied(copiedClass);\n}\n\nfunction setter(valueToCopy, variable, callback) {\n    const copiedClass = 'copied';\n    if (!variable.includes(copiedClass))\n        copy(valueToCopy, callback, copiedClass)\n}\n\nfunction delay(callback, delay = 2000) {\n    setTimeout(() => {\n        callback('');\n    }, delay)\n}\n\nexport default Index;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n    return (\n        <button onClick={props.callback} className=\"button\">{props.name}</button>\n    );\n}\n\nexport default Button;\n","import Button from \"../../components/Button/Button\";\nimport React from \"react\";\nimport './index.sass'\n\nfunction CreateDB(props) {\n    return(\n        <div className=\"create_element\">\n            <h2>Create database in one click</h2>\n            <h3>Make it easy</h3>\n            <Button name={\"Create Database\"} callback={props.callback}/>\n        </div>\n    );\n}\n\nexport default CreateDB;","import React, {useState} from 'react';\nimport './App.sass';\nimport Index from \"./pages/Instructions\";\nimport CreateDB from \"./pages/CreateDB\";\n\nfunction App() {\n    let [isLoading, setLoading] = useState(false);\n    const animationType = '3s ease-in-out infinite loading';\n\n    let [apiKey, setApiKey] = useState(localStorage.getItem('apiKey'));\n    let body = apiKey ? <Index apiKey={apiKey}/> :\n        <CreateDB callback={() => createDatabase(setLoading).then((apiKey) => setApiKey(apiKey))}/>;\n\n    return (\n    <div className=\"App\">\n        <header className=\"header\">DB<span className=\"header-selection\">hub</span></header>\n        <div id=\"loaderPlaceholder\"></div>\n        <div id=\"loader\" style={isLoading ? {animation: animationType} : {animation: \"none\"}}></div>\n        {body}\n        <div className=\"signs\">Created by @noxormy</div>\n    </div>\n  );\n}\n\nasync function createDatabase(setLoading) {\n    const api = 'https://dbhub.herokuapp.com';\n    const createNewUser = 'create-new-user';\n\n    setLoading(true);\n    let result = await fetch(api + '/' + createNewUser);\n    setLoading(false);\n\n    if (result.ok) {\n        let json = await result.json();\n        localStorage.setItem('apiKey', json);\n        return json;\n    } else {\n        console.log(\"HTTP Error: \" + result.status);\n        return false;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}