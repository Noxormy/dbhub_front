{"version":3,"sources":["components/Button.js","components/Instructions.js","pages/CreateDB/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","callback","className","name","copy","text","textarea","document","createElement","setAttribute","textContent","body","appendChild","select","execCommand","remove","usage","install","Instructions","copyIcon","xmlns","viewBox","data-name","d","usageCode","apiKey","CreateDB","App","useState","isLoading","setLoading","setApiKey","a","async","fetch","api","result","ok","json","console","log","status","createDatabase","then","id","style","animation","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23072d42.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n    return (\n        <button onClick={props.callback} className=\"button\">{props.name}</button>\n    );\n}\n\nexport default Button;\n","import React from 'react';\nimport './Instructions.css';\n\nfunction Instructions(props) {\n    const copyIcon =\n        <svg className=\"copy\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\"><g data-name=\"Layer 3\"><path d=\"M40.63,13H12.38A4.69,4.69,0,0,0,7.7,17.67V57.31A4.69,4.69,0,0,0,12.38,62H40.63a4.69,4.69,0,0,0,4.69-4.69V17.67A4.69,4.69,0,0,0,40.63,13Zm2.69,44.33A2.69,2.69,0,0,1,40.63,60H12.38A2.69,2.69,0,0,1,9.7,57.31V17.67A2.69,2.69,0,0,1,12.38,15H40.63a2.69,2.69,0,0,1,2.69,2.69Z\"/><path d=\"M51.74,2H23.26a4.58,4.58,0,0,0-4.58,4.57v3.55a1,1,0,0,0,2,0V6.57A2.58,2.58,0,0,1,23.26,4H51.74A2.57,2.57,0,0,1,54.3,6.57V46.44A2.58,2.58,0,0,1,51.74,49H48.5a1,1,0,0,0,0,2h3.24a4.58,4.58,0,0,0,4.57-4.58V6.57A4.57,4.57,0,0,0,51.74,2Z\"/></g></svg>\n    const usageCode =\n        <p>\n        <div onClick={() => copy(usage)}>{copyIcon}</div>\n        <span className=\"keyword\">const</span> {'{'}<span className=\"variable\">getDatabase</span>{'}'} =<span className=\"func\"> require</span>(<span className=\"string\">'dbhub'</span>);<br/>\n        <br/>\n        <span className=\"keyword\">let</span> <span className=\"variable\">apikey</span> =<span className=\"string\"> '{props.apiKey}'</span>;<br/>\n        <span className=\"keyword\">let</span> <span className=\"variable\">db</span> =<span className=\"func\"> getDatabase</span>(<span className=\"variable\">apiKey</span>);<br/>\n        <br/>\n        {'// Create collection'}<br/>\n            <span className=\"keyword\">let</span> <span className=\"variable\">collectionName</span> = <span className=\"string\">'example'</span>;<br/>\n            <span className=\"keyword\">let</span> <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">getCollection</span>(<span className=\"variable\">collectionName</span>);<br/>\n        <br/>\n        {'//Usage'}<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>)<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>)<br/>\n        <br/>\n        {'//Async'}<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">id</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">element</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n        <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n    </p>;\n    return (\n        <div className='instructions'>\n            <div className='install'>\n                <div onClick={() => copy(install)}>{copyIcon}</div>\n                $ npm install dbhub -s\n            </div>\n            <div className='usage'>{usageCode}</div>\n        </div>\n    );\n}\n\nfunction copy(text) {\n    let textarea = document.createElement('textarea');\n    textarea.setAttribute('visibility', 'collapse');\n    textarea.textContent = text;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove()\n}\n\nconst usage = 'const {getDatabase} = require(\\'dbhub\\');\\n' +\n'\\n' +\n'let apikey = \\'\\';\\n' +\n'let db = getDatabase(apiKey);\\n' +\n'\\n' +\n'// Create collection\\n' +\n'let collectionName = \\'example\\';\\n' +\n'let collection = db.getCollection(collectionName);\\n' +\n'\\n' +\n'//Usage\\n' +\n'collection.create(element)\\n' +\n'collection.read(id)\\n' +\n'collection.update(id, element)\\n' +\n'collection.delete(id)\\n' +\n'\\n' +\n'//Async\\n' +\n'collection.create(element).then((id) => {});\\n' +\n'collection.read(id).then((element) => {});\\n' +\n'collection.update(id, element).then((success) => {});\\n' +\n'collection.delete(id).then((success) => {});';\n\nconst install = 'npm install dbhub -s';\n\nexport default Instructions;\n","import Button from \"../../components/Button\";\nimport React from \"react\";\nimport Instructions from \"../../components/Instructions\";\n\nfunction CreateDB(props) {\n    return(\n        <div className=\"create_element\">\n            <h2>Create database in one click</h2>\n            <h3>Make it easy</h3>\n            <Button name={\"Create Database\"} callback={props.callback}/>\n        </div>\n    );\n}\n\nexport default CreateDB;","import React, {useState} from 'react';\nimport './App.css';\nimport Button from \"./components/Button\";\nimport Instructions from \"./components/Instructions\";\nimport CreateDB from \"./pages/CreateDB\";\n\n\n\nfunction App() {\n    let [isLoading, setLoading] = useState(false);\n    const animationType = '3s ease-in-out infinite loading';\n\n    let [apiKey, setApiKey] = useState(false);\n    let body = apiKey ? <Instructions apiKey={apiKey}/> : <CreateDB callback={() => createDatabase(setLoading).then((apiKey) => setApiKey(apiKey))}/>\n\n    return (\n    <div className=\"App\">\n        <header className=\"App-header\">DB<span className=\"App-selection\">hub</span></header>\n        <div id=\"loaderPlaceholder\"></div>\n        <div id=\"loader\" style={isLoading ? {animation: animationType} : {animation: \"none\"}}></div>\n        {body}\n        <div className=\"signs\">Created by @noxormy</div>\n    </div>\n  );\n}\n\nasync function createDatabase(setLoading) {\n    const api = 'https://dbhub.herokuapp.com';\n    const createNewUser = 'create-new-user';\n\n    setLoading(true);\n    let result = await fetch(api + '/' + createNewUser);\n    setLoading(false);\n    if (result.ok) {\n        let json = await result.json();\n        console.log(json);\n        return json;\n    } else {\n        console.log(\"Ошибка HTTP: \" + result.status);\n        return false;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}