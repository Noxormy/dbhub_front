{"version":3,"sources":["pages/Instructions/codeExample.js","pages/Instructions/index.js","components/Button/Button.js","pages/CreateDB/index.js","App.js","serviceWorker.js","index.js"],"names":["copyIcon","className","xmlns","viewBox","data-name","d","getUsageBlock","apiKey","install","usage","copy","text","textarea","document","createElement","setAttribute","textContent","body","appendChild","select","execCommand","remove","Index","props","onClick","Button","callback","name","CreateDB","App","useState","isLoading","setLoading","localStorage","getItem","setApiKey","a","async","fetch","api","result","ok","json","setItem","console","log","status","createDatabase","then","id","style","animation","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dcb82cb.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const copyIcon =\n    <svg className=\"copy\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\n        <g data-name=\"Layer 3\">\n            <path d=\"M40.63,13H12.38A4.69,4.69,0,0,0,7.7,17.67V57.31A4.69,4.69,0,0,0,12.38,62H40.63a4.69,4.69,0,0,0,4.69-4.69V17.67A4.69,4.69,0,0,0,40.63,13Zm2.69,44.33A2.69,2.69,0,0,1,40.63,60H12.38A2.69,2.69,0,0,1,9.7,57.31V17.67A2.69,2.69,0,0,1,12.38,15H40.63a2.69,2.69,0,0,1,2.69,2.69Z\"/>\n            <path d=\"M51.74,2H23.26a4.58,4.58,0,0,0-4.58,4.57v3.55a1,1,0,0,0,2,0V6.57A2.58,2.58,0,0,1,23.26,4H51.74A2.57,2.57,0,0,1,54.3,6.57V46.44A2.58,2.58,0,0,1,51.74,49H48.5a1,1,0,0,0,0,2h3.24a4.58,4.58,0,0,0,4.57-4.58V6.57A4.57,4.57,0,0,0,51.74,2Z\"/>\n        </g>\n    </svg>;\n\nexport const getUsageBlock = (apiKey) => {\n        return(\n                <p>\n                    <span className=\"keyword\">const</span> {'{'}<span className=\"variable\">getDatabase</span>{'}'} =<span className=\"func\"> require</span>(<span className=\"string\">'dbhub'</span>);<br/>\n                    <br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">apikey</span> =<span className=\"string\"> '{apiKey}'</span>;<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">db</span> =<span className=\"func\"> getDatabase</span>(<span className=\"variable\">apiKey</span>);<br/>\n                    <br/>\n                    {'// Create collection'}<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">collectionName</span> = <span className=\"string\">'example'</span>;<br/>\n                    <span className=\"keyword\">let</span> <span className=\"variable\">collection</span> = <span className=\"variable\">db</span>.<span className=\"func\">getCollection</span>(<span className=\"variable\">collectionName</span>);<br/>\n                    <br/>\n                    {'//Usage'}<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>)<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>)<br/>\n                    <br/>\n                    {'//Async'}<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">create</span>(<span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">id</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">read</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">element</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">update</span>(<span className=\"variable\">id</span>, <span className=\"variable\">element</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n                    <span className=\"variable\">collection</span>.<span className=\"func\">delete</span>(<span className=\"variable\">id</span>).<span className=\"func\">then</span>((<span className=\"variable\">success</span>) => {'{}'});<br/>\n                </p>\n        )\n};\n\nexport const install = 'npm install dbhub -s';\n\nexport const usage =\n    'const {getDatabase} = require(\\'dbhub\\');\\n' +\n    '\\n' +\n    'let apikey = \\'\\';\\n' +\n    'let db = getDatabase(apiKey);\\n' +\n    '\\n' +\n    '// Create collection\\n' +\n    'let collectionName = \\'example\\';\\n' +\n    'let collection = db.getCollection(collectionName);\\n' +\n    '\\n' +\n    '//Usage\\n' +\n    'collection.create(element)\\n' +\n    'collection.read(id)\\n' +\n    'collection.update(id, element)\\n' +\n    'collection.delete(id)\\n' +\n    '\\n' +\n    '//Async\\n' +\n    'collection.create(element).then((id) => {});\\n' +\n    'collection.read(id).then((element) => {});\\n' +\n    'collection.update(id, element).then((success) => {});\\n' +\n    'collection.delete(id).then((success) => {});';\n","import React from 'react';\nimport './index.sass';\nimport {copyIcon, install, usage, getUsageBlock} from \"./codeExample\";\n\nfunction Index(props) {\n    return (\n        <div className='instructions'>\n            <div className='install'>\n                <div onClick={() => copy(install)}>{copyIcon}</div>\n                $ {install}\n            </div>\n            <div className='usage'>\n                <div onClick={() => copy(usage)}>{copyIcon}</div>\n                {getUsageBlock(props.apiKey)}\n            </div>\n        </div>\n    );\n}\n\nfunction copy(text) {\n    let textarea = document.createElement('textarea');\n    textarea.setAttribute('visibility', 'collapse');\n    textarea.textContent = text;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove()\n}\n\nexport default Index;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n    return (\n        <button onClick={props.callback} className=\"button\">{props.name}</button>\n    );\n}\n\nexport default Button;\n","import Button from \"../../components/Button/Button\";\nimport React from \"react\";\nimport './index.sass'\n\nfunction CreateDB(props) {\n    return(\n        <div className=\"create_element\">\n            <h2>Create database in one click</h2>\n            <h3>Make it easy</h3>\n            <Button name={\"Create Database\"} callback={props.callback}/>\n        </div>\n    );\n}\n\nexport default CreateDB;","import React, {useState} from 'react';\nimport './App.sass';\nimport Index from \"./pages/Instructions\";\nimport CreateDB from \"./pages/CreateDB\";\n\nfunction App() {\n    let [isLoading, setLoading] = useState(false);\n    const animationType = '3s ease-in-out infinite loading';\n\n    let [apiKey, setApiKey] = useState(localStorage.getItem('apiKey'));\n    let body = apiKey ? <Index apiKey={apiKey}/> :\n        <CreateDB callback={() => createDatabase(setLoading).then((apiKey) => setApiKey(apiKey))}/>;\n\n    return (\n    <div className=\"App\">\n        <header className=\"header\">DB<span className=\"header-selection\">hub</span></header>\n        <div id=\"loaderPlaceholder\"></div>\n        <div id=\"loader\" style={isLoading ? {animation: animationType} : {animation: \"none\"}}></div>\n        {body}\n        <div className=\"signs\">Created by @noxormy</div>\n    </div>\n  );\n}\n\nasync function createDatabase(setLoading) {\n    const api = 'https://dbhub.herokuapp.com';\n    const createNewUser = 'create-new-user';\n\n    setLoading(true);\n    let result = await fetch(api + '/' + createNewUser);\n    setLoading(false);\n\n    if (result.ok) {\n        let json = await result.json();\n        localStorage.setItem('apiKey', json);\n        return json;\n    } else {\n        console.log(\"HTTP Error: \" + result.status);\n        return false;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}